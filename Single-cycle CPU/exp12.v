
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module exp12(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// Video-In //////////
	input 		          		TD_CLK27,
	input 		     [7:0]		TD_DATA,
	input 		          		TD_HS,
	output		          		TD_RESET_N,
	input 		          		TD_VS,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// Audio //////////
	input 		          		AUD_ADCDAT,
	inout 		          		AUD_ADCLRCK,
	inout 		          		AUD_BCLK,
	output		          		AUD_DACDAT,
	inout 		          		AUD_DACLRCK,
	output		          		AUD_XCK,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2,

	//////////// ADC //////////
	output		          		ADC_CONVST,
	output		          		ADC_DIN,
	input 		          		ADC_DOUT,
	output		          		ADC_SCLK,

	//////////// I2C for Audio and Video-In //////////
	output		          		FPGA_I2C_SCLK,
	inout 		          		FPGA_I2C_SDAT,

	//////////// IR //////////
	input 		          		IRDA_RXD,
	output		          		IRDA_TXD
);


wire [31:0] data,inst,pc,aluout;
reg [31:0] memout;
wire resetn = KEY[0];
wire wmem;
reg inst_e;
reg vgamem_e;
//clk
wire clk1;
reg [3:0]cnt = 0;
always @ (posedge CLOCK_50)begin
	cnt = cnt + 1;
end
wire memclk = cnt[0];
wire cpuclk = cnt[3];

clkgen #1 c1(CLOCK_50,1'b0,1'b1,clk1);

wire cpuclk_hand = !KEY[1];
//clk

//clock
reg clockmem_addr;
reg clockmem_enable;
wire [31:0]clock_data;
wire clock_addr;
wire [31:0]clockmem_cpu;

e_clock ec(CLOCK_50,resetn,!KEY[1],SW[1:0],SW[5:2],clock_data);
//clock

//kernel
reg kernelmem_enable;
reg [11:0] kernelmem_addr;
wire [31:0]kernelmemout_cpu;
//kernel

//LEDR
reg ledrmem_enable;
reg ledrmem_addr;
wire [31:0]ledrmemout_cpu;
wire [31:0]ledrmemout_ledr;
//assign LEDR[9:0] = ledrmemout_ledr[9:0];
//LEDR

//keyboard
reg keyboard_enable;
reg keyboard_addr;
wire [31:0]keyboardmemout_cpu;
wire [7:0]ascii_kb;
wire [7:0]tempout;
wire enable;
//kbd_top kb(CLOCK_50,resetn,PS2_CLK,PS2_DAT,ascii_kb);
exp08 debug(CLOCK_50,KEY[3:0],SW[9:0],tempout,enable,PS2_CLK,PS2_CLK2,PS2_DAT,PS2_DAT2);
assign ascii_kb = tempout & {{7{enable}},enable};
//keyboard

//vga
wire [31:0]ascii_vga;
reg vga_enable;
reg [9:0]vga_addr;
wire [31:0]vgamemout_cpu;
wire [9:0] vga_inaddr;
wire [31:0] vgamemout_vga;
vga_top v(CLOCK_50,resetn,vgamemout_vga,VGA_BLANK_N,VGA_B,VGA_CLK,VGA_G,VGA_HS,VGA_R,VGA_SYNC_N,VGA_VS,vga_inaddr);
//vga

//cpu sc(cpuclk,resetn,inst,memout,pc,wmem,aluout,data);
//cpu sc(cpuclk_debug,resetn,inst,memout,pc,wmem,aluout,data);
cpu sc(clk1,resetn,inst,memout,pc,wmem,aluout,data);
//cpu sc(clk_hand,resetn,inst,memout,pc,wmem,aluout,data);

instructionmem instmem(.inclock(memclk),.address(pc[11:2]),.q(inst),.outclock(memclk));

kernelmem kemem(.address_a(kernelmem_addr),.clock_a(memclk),.q_a(kernelmemout_cpu),.data_a(data),.wren_a(kernelmem_enable));//操作系统内核使用的内存

clockmem cmem(.address_a(clockmem_addr),.clock_a(memclk),.wren_a(clockmem_enable),.data_a(data),.q_a(clockmem_cpu),.address_b(1'b0),.data_b(clock_data),.wren_b(1),.clock_b(clk1));

ledrmem lmem(.address_a(ledrmem_addr),.clock_a(memclk),.wren_a(ledrmem_enable),.data_a(data),.address_b(1'b0),.clock_b(CLOCK_50),.wren_b(1'b0),.q_a(ledrmemout_cpu),.q_b(ledrmemout_ledr));

keyboardmem kbmem(.address_a(keyboard_addr),.wren_a(keyboard_enable),.clock_a(memclk),.q_a(keyboardmemout_cpu),.data_a(data),.clock_b(CLOCK_50),.wren_b(enable),.address_b(1'b0),.data_b({{24{1'b0}},ascii_kb}));
//keyboardmem kbmem(.address_a(0),.wren_a(0),.clock_a(memclk),.q_a(debugdata),.clock_b(CLOCK_50),.wren_b(1'b1),.address_b(1'b0),.data_b({{24{1'b0}},ascii_kb}));
//keyboardmem kbmem(.address_a(keyboard_addr),.wren_a(keyboard_enable),.clock_a(CLOCK_50),.q_a(keyboardmemout_cpu),.clock_b(CLOCK_50),.wren_b(1'b1),.address_b(1'b0),.data_b({{24{1'b0}},ascii_kb}));


vgamem vmem(.address_a(vga_addr),.clock_a(memclk),.wren_a(vga_enable),.data_a(data),.address_b(vga_inaddr),.clock_b(VGA_CLK),.wren_b(1'b1),.q_b(vgamemout_vga));
//MMIO
always @ (*)begin
	case(aluout[14:12])
		3'b000:begin//内核缓冲区
			kernelmem_enable = wmem;
			kernelmem_addr = aluout[6:2];
			memout = kernelmemout_cpu;
			clockmem_enable = 0;
			keyboard_enable = 0;
			ledrmem_enable = 0;
			vga_enable = 0;
		end
		3'b001:begin//显存
			clockmem_enable = 0;
			kernelmem_enable = 0;
			keyboard_enable = 0;
			ledrmem_enable = 0;
			vga_enable = wmem;
			vga_addr = aluout[11:2];
		end
		3'b010:begin//键盘
			keyboard_enable = wmem;
			kernelmem_enable = 0;
			clockmem_enable = 0;
			ledrmem_enable = 0;
			vga_enable = 0;
			keyboard_addr = aluout[0];
			memout = keyboardmemout_cpu;
		end
		3'b011:begin//时钟
			clockmem_enable = wmem;
			kernelmem_enable = 0;
			clockmem_addr = aluout[0];
			vga_enable = 0;
			ledrmem_enable = 0;
			keyboard_enable = 0;
			memout = clockmem_cpu;
		end
		3'b100:begin//灯
			ledrmem_enable = wmem;
			ledrmem_addr = aluout[0];
			kernelmem_enable = 0;
			keyboard_enable = 0;
			clockmem_enable = 0;
			vga_enable = 0;
			memout  = ledrmemout_cpu;
		end
		default:;
	endcase
end

//MMIO

//debug
wire [3:0] in = SW[9:6];
wire [31:0] debugdata;

reg cpuclk_debug;
/*
turn7seg t1(1'b1,inst[31:28],HEX5);
turn7seg t2(1'b1,inst[27:24],HEX4);
turn7seg t3(1'b1,inst[23:20],HEX3);
turn7seg t4(1'b1,inst[19:16],HEX2);
turn7seg t5(1'b1,inst[15:12],HEX1);
turn7seg t6(1'b1,inst[11:8],HEX0);
*/
/*
turn7seg tpc1(1'b1,pc[9:6],HEX1);
turn7seg tpc2(1'b1,pc[5:2],HEX0);
turn7seg mem(1'b1,memout[3:0],HEX2);
turn7seg d(1'b1,memout[7:4],HEX3);
turn7seg d2(1'b1,data[3:0],HEX4);
*/
turn7seg a2(1'b1,aluout[3:0],HEX1);
turn7seg a1(1'b1,pc[5:2],HEX0);
turn7seg a3(1'b1,aluout[7:4],HEX2);
turn7seg a4(1'b1,aluout[11:8],HEX3);
turn7seg a5(1'b1,aluout[15:12],HEX4);
//assign LEDR[5:0] = aluout[5:0];
//assign LEDR[9:6] = pc[3:0];
//assign LEDR[6] = wmem;
//assign LEDR[8:7] = aluout[13:12];
//assign LEDR[9] = enable;
//assign LEDR[9:7] = debugdata[2:0];
//assign LEDR[9:2] = debugdata[7:0];
//assign LEDR[9:2] = ascii_kb;
//assign LEDR[9:2] = memout[7:0];

always @ (cpuclk)begin
	if(pc == 32'h4)
		cpuclk_debug = 0;
	else
		cpuclk_debug = cpuclk;
end

//debug
endmodule
